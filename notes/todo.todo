# Tooling 

.- webpack-dev-server isn't livereloading static assets
	webpack-dev-server doesn't livereload unless page includes bundle	

.- build deepstream client into package
	- how big is ds client? 190kB

.- do we really need the regenerator runtime?
	- can we webpack without it, targeting only recent browsers?
	- just a few k, lets not worry abou tit

.- make build smaller, its way too big!

- consider providing min and unmin versions
	https://stackoverflow.com/questions/25956937/how-to-build-minified-and-uncompressed-bundle-with-webpack
	- compare to other p5 libraries

# Refactoring

- Record 
	- constructor(client, name)

		- no callback to constructor, follow whenReady idiom from Room and Client
		- take full name of record rather than ID, consumers can create full name
			- maybe make a factory method on room that returns a record by id and tracks it in a list

	- check this out, in order to make record support sharing any property of the record (not just .shared)
		- 1) watch the whole record instead of shared
		- 2) return the part of the whole record you want to expose, or that is requested
		- 3) done!

- Client
	- improve network usage for getAllClients
	- consider cacheing random id in _session_ storage so reloads can reconnect
	- also, while possibly this same library could be used for long term server persistance, for now limit the scope to session-longevity multiplayer

- Room
	- when to clear?
	currently "missing" participants are kept around on the server
	this allows them to come back when ds quick drops and reconnects them
	this could also allow connections to survive reload (if we cashed the random id in browser)
	or even longer absenses
		- ? add clearMissing()
		- ? add clear()
		- ? add born timestamp
		- ? add touch timestamp
		- ? internally call clearMissing(age)
	
	.- currently .isMissing is only read for the debug view
		- ? should clearMissing() and chooseHost() use .isMissing instead?
			- basically, yes if the code is cleaner that way

	.- even if participants properly call room.leave()

	.- probably better to keep a record for each participant and then keep aparticpants in a ds list

	.- ?change participants {} to [] 
	.- ?remove _markMissing
	.- ?if not, then new host in _chooseHost should mark missing on server

# Functionality
	- Keep track of records being created in lists so they can be cleaned up
	or, maybe don't, and just assume that the whole thing gets blown away every night?

# Questions
	- how the hell is the onChange proxy handling array insert/remove (splice)?
		a: onChange sees this as replacing the array with the new array, sends the entire contents of the array
		a: this creates a lot of data on the wire but...
		a: since it doesn't look like DS has a way to splice an array, this doesn't make things any worse at least

# Style / Naming

+- clean/remove old files
- change "id" to "name", lets make "name" be the full thing = "prefix/id"

# Requests
- add way to clear shared object
- freindly warning if user tries to read/write shared

# Questions
- Can I make more than one shared data?
	- Yes.
	- and it avoids conflicts

- What can be shared?
	- Basic data like strings and numbers
	- Arrays and Data Objects
	- Nesting is okay
	- Constructed Objects don't work, but sometimes you can "serialize" them
	```
	shared.color = color(random(255), random(255), random(255)).toString();
	...
	fill(shared.color);
	```


# Features

- config auto publish or not on records
- config record publish debounce

# Bugs

- change hooks: npm install is running prepublish, and prepublish doesn't work on pc

# Branch - Participants

- expose participant count
- expose participant list
- expose a record of info for each participant

# Branch - Info
- using vue?

- debug view?

- room view?
	- show room records
	- show room participants

- dashboard view?
	- show apps, rooms, records, participants
